-- ASSIGNING THE ACCOUNT TYPE 
USE ROLE ACCOUNTADMIN;

-- USING THE WAREHOUSE AVAILABLE
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE NAMED AS SUBQUERIES_DATABASE
CREATE DATABASE IF NOT EXISTS SUBQUERIES_DATABASE;

-- CREATING A SCHEMA NAMED AS SUBQUERIES_SCHEMA
CREATE SCHEMA IF NOT EXISTS SUBQUERIES_SCHEMA;

-- USING THE DATABASE CREATED
USE DATABASE SUBQUERIES_DATABASE;

-- USING THE SCHEMA CREATED 
USE SCHEMA SUBQUERIES_SCHEMA;

-- CREATING THE TABLE CUSTOMERS
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(100),
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50),
    JOINED_DATE DATE
);

-- CREATING THE TABLE ORDERS
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    ORDER_DATE DATE,
    SHIP_DATE DATE,
    QUANTITY INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- CREATING THE TABLE PRODUCTS
CREATE TABLE PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    UNIT_PRICE DECIMAL(10, 2)
);

-- INSERTING VALUES INTO THE CUSTOMERS TABLE 
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CITY, COUNTRY, JOINED_DATE) VALUES
(1, 'John Doe', 'Toronto', 'Canada', '2022-01-15'),
(2, 'Jane Smith', 'New York', 'USA', '2021-03-22'),
(3, 'Carlos Lopez', 'Mexico City', 'Mexico', '2023-05-10'),
(4, 'Sophia Patel', 'London', 'UK', '2021-11-19'),
(5, 'Ahmed Khan', 'Mumbai', 'India', '2022-09-30'),
(6, 'Emily Johnson', 'Los Angeles', 'USA', '2022-05-05'),
(7, 'James Lee', 'Sydney', 'Australia', '2023-01-20'),
(8, 'Emma Wilson', 'Vancouver', 'Canada', '2021-08-14'),
(9, 'Mohammed Ali', 'Dubai', 'UAE', '2022-04-11'),
(10, 'Liu Wei', 'Beijing', 'China', '2021-12-28'),
(11, 'Olivia Brown', 'Melbourne', 'Australia', '2023-03-30'),
(12, 'Isabella Martinez', 'Madrid', 'Spain', '2022-07-25'),
(13, 'Liam Evans', 'Auckland', 'New Zealand', '2021-09-17'),
(14, 'Hannah Williams', 'Chicago', 'USA', '2022-02-18'),
(15, 'Arjun Gupta', 'Delhi', 'India', '2023-06-12'),
(16, 'Lucas Kim', 'Seoul', 'South Korea', '2021-10-21'),
(17, 'Eva Garcia', 'Barcelona', 'Spain', '2022-08-07'),
(18, 'David Thompson', 'Houston', 'USA', '2023-07-02'),
(19, 'Ava Adams', 'Boston', 'USA', '2021-11-30'),
(20, 'Noah Clark', 'San Francisco', 'USA', '2022-03-19'),
(21, 'Chloe Robinson', 'Paris', 'France', '2022-12-01'),
(22, 'Mia Turner', 'Rome', 'Italy', '2021-05-22'),
(23, 'Elijah Harris', 'Berlin', 'Germany', '2023-04-18'),
(24, 'Zara Ahmed', 'Cairo', 'Egypt', '2022-06-03'),
(25, 'William King', 'Dublin', 'Ireland', '2021-07-11'),
(26, 'Sophia Lee', 'Tokyo', 'Japan', '2023-08-29'),
(27, 'Benjamin Scott', 'Edinburgh', 'UK', '2021-01-08'),
(28, 'Lucas Anderson', 'Stockholm', 'Sweden', '2022-10-14'),
(29, 'Isla Perez', 'Buenos Aires', 'Argentina', '2023-02-25'),
(30, 'Ryan Baker', 'Cape Town', 'South Africa', '2021-09-05');

-- INSERTING THE VALUES INTO THE ORDERS TABLE
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, ORDER_DATE, SHIP_DATE, QUANTITY)
VALUES
(1, 1, 101, '2024-01-01', '2024-01-05', 10),
(2, 2, 102, '2024-01-03', '2024-01-06', 5),
(3, 3, 103, '2024-01-05', '2024-01-10', 8),
(4, 4, 104, '2024-01-07', '2024-01-12', 3),
(5, 5, 105, '2024-01-10', '2024-01-15', 12),
(6, 6, 106, '2024-01-12', '2024-01-17', 20),
(7, 7, 107, '2024-01-14', '2024-01-18', 6),
(8, 8, 108, '2024-01-17', '2024-01-22', 15),
(9, 9, 109, '2024-01-18', '2024-01-23', 9),
(10, 10, 110, '2024-01-20', '2024-01-25', 18),
(11, 11, 111, '2024-01-23', '2024-01-28', 11),
(12, 12, 112, '2024-01-25', '2024-01-29', 7),
(13, 13, 113, '2024-01-27', '2024-02-01', 16),
(14, 14, 114, '2024-01-29', '2024-02-03', 4),
(15, 15, 115, '2024-01-31', '2024-02-05', 19),
(16, 16, 116, '2024-02-02', '2024-02-07', 6),
(17, 17, 117, '2024-02-04', '2024-02-08', 14),
(18, 18, 118, '2024-02-06', '2024-02-10', 9),
(19, 19, 119, '2024-02-08', '2024-02-13', 21),
(20, 20, 120, '2024-02-10', '2024-02-15', 17),
(21, 1, 101, '2024-02-12', '2024-02-17', 5),
(22, 2, 102, '2024-02-14', '2024-02-19', 7),
(23, 3, 103, '2024-02-15', '2024-02-21', 3),
(24, 4, 104, '2024-02-17', '2024-02-22', 11),
(25, 5, 105, '2024-02-18', '2024-02-23', 9),
(26, 6, 106, '2024-02-19', '2024-02-24', 10),
(27, 7, 107, '2024-02-20', '2024-02-25', 6),
(28, 8, 108, '2024-02-21', '2024-02-26', 15),
(29, 9, 109, '2024-02-22', '2024-02-27', 12),
(30, 10, 110, '2024-02-23', '2024-02-28', 18),
(31, 11, 111, '2024-02-24', '2024-03-01', 5),
(32, 12, 112, '2024-02-25', '2024-03-02', 14),
(33, 13, 113, '2024-02-26', '2024-03-03', 8),
(34, 14, 114, '2024-02-27', '2024-03-04', 16),
(35, 15, 115, '2024-02-28', '2024-03-05', 13),
(36, 16, 116, '2024-03-01', '2024-03-06', 20),
(37, 17, 117, '2024-03-02', '2024-03-07', 9),
(38, 18, 118, '2024-03-03', '2024-03-08', 4),
(39, 19, 119, '2024-03-04', '2024-03-09', 21),
(40, 20, 120, '2024-03-05', '2024-03-10', 18),
(41, 1, 101, '2024-03-06', '2024-03-11', 7),
(42, 2, 102, '2024-03-07', '2024-03-12', 11),
(43, 3, 103, '2024-03-08', '2024-03-13', 10),
(44, 4, 104, '2024-03-09', '2024-03-14', 15),
(45, 5, 105, '2024-03-10', '2024-03-15', 17),
(46, 6, 106, '2024-03-11', '2024-03-16', 13),
(47, 7, 107, '2024-03-12', '2024-03-17', 6),
(48, 8, 108, '2024-03-13', '2024-03-18', 9),
(49, 9, 109, '2024-03-14', '2024-03-19', 20),
(50, 10, 110, '2024-03-15', '2024-03-20', 12);

-- INSERTING VALUES INTO THE PRODUCTS TABLE
INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, CATEGORY, UNIT_PRICE)
VALUES
(101, 'Laptop', 'Electronics', 800.00),
(102, 'Smartphone', 'Electronics', 600.00),
(103, 'Tablet', 'Electronics', 300.00),
(104, 'Headphones', 'Accessories', 50.00),
(105, 'Keyboard', 'Accessories', 30.00),
(106, 'Mouse', 'Accessories', 25.00),
(107, 'Smartwatch', 'Wearables', 200.00),
(108, 'Monitor', 'Electronics', 250.00),
(109, 'External Hard Drive', 'Storage', 100.00),
(110, 'USB-C Hub', 'Accessories', 20.00),
(111, 'Gaming Console', 'Gaming', 400.00),
(112, 'Router', 'Networking', 60.00),
(113, 'Bluetooth Speaker', 'Audio', 80.00),
(114, 'VR Headset', 'Gaming', 350.00),
(115, 'Smart Glasses', 'Wearables', 500.00),
(116, 'Action Camera', 'Cameras', 300.00),
(117, 'Drone', 'Cameras', 600.00),
(118, 'Smart Light Bulb', 'Home Automation', 40.00),
(119, 'Electric Kettle', 'Home Appliances', 35.00),
(120, 'Air Fryer', 'Home Appliances', 120.00),
(121, 'Fitness Tracker', 'Wearables', 150.00),
(122, 'Portable Projector', 'Home Entertainment', 450.00),
(123, 'Wireless Charger', 'Accessories', 25.00);

SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;

-- WRITE A QUERY TO GET THE ORDER_ID WHERE QUANTITY IS GREATER THEN AVG
WITH AVG_COUNT AS(
SELECT
    ORDER_ID,
    QUANTITY,
    AVG(QUANTITY) AS AVG_QTY
FROM ORDERS
GROUP BY 1,2)
SELECT
    ORDER_ID,
    AVG_QTY
FROM AVG_COUNT
WHERE ORDER_ID> AVG_QTY;

/*Get the total quantity (sum of quantity) from products orde by each customer . Note that we need to 
display the customer_id,customer Name, Product_name*/

SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    P.PRODUCT_NAME,
    SUM(QUANTITY) AS TOTAL_QTY
FROM CUSTOMERS AS C
LEFT JOIN ORDERS AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
LEFT JOIN PRODUCTS AS P
ON O.PRODUCT_ID = P.PRODUCT_ID
WHERE P.PRODUCT_NAME IS NOT NULL
GROUP BY 1,2,3
ORDER BY CUSTOMER_ID ASC;

-- USING CTE
WITH CUST_ORDER_QTY AS(
    SELECT
        PRODUCT_ID,
        CUSTOMER_ID,
        SUM(QUANTITY) AS TOTAL_QTY
    FROM ORDERS
    WHERE CUSTOMER_ID IN(4,5,6,7,9)
    GROUP BY 1,2
    HAVING TOTAL_QTY BETWEEN 20 AND 45
)
SELECT
    T1.CUSTOMER_ID,
    T1.CUSTOMER_NAME,
    T3.PRODUCT_NAME,
    T2.TOTAL_QTY
FROM CUSTOMERS AS T1
LEFT JOIN CUST_ORDER_QTY AS T2
ON T1.CUSTOMER_ID = T2.CUSTOMER_ID
LEFT JOIN PRODUCTS AS T3
ON T2.PRODUCT_ID = T3.PRODUCT_ID
WHERE PRODUCT_NAME IS NOT NULL
ORDER BY CUSTOMER_ID;

--SUBQUERY
SELECT
    CUSTOMER_ID,
    CUSTOMER_NAME,
    (
        SELECT SUM(QUANTITY)
        FROM ORDERS AS O
        WHERE C.CUSTOMER_ID = O.CUSTOMER_ID
        AND P.PRODUCT_ID = O.PRODUCT_ID
    )AS TOTAL_QTY
FROM CUSTOMERS AS C
JOIN PRODUCTS AS P
ON P.PRODUCT_ID IN
                (
                    SELECT DISTINCT PRODUCT_ID 
                    FROM ORDERS 
                    WHERE C.CUSTOMER_ID = CUSTOMER_ID
                );

/*List customers who have ordered more than 25 units in total
Note That we need to display the name of the customers and their total sum of quantity*/
--JOINS
SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    SUM(O.QUANTITY) AS TOTAL_QTY
FROM CUSTOMERS AS C
LEFT JOIN ORDERS AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY 1,2
HAVING TOTAL_QTY > 25;

--CTE
WITH TOTAL_QTY AS(
    SELECT
        CUSTOMER_ID,
        SUM(QUANTITY) AS TOTAL_QTY
    FROM ORDERS
    GROUP BY 1
    HAVING TOTAL_QTY > 25
)
SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    T1.TOTAL_QTY
FROM  CUSTOMERS AS C
JOIN TOTAL_QTY AS T1
ON C.CUSTOMER_ID = T1.CUSTOMER_ID;

--SUBSEQUENCE

SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    (
        SELECT
            SUM(O.QUANTITY)
        FROM ORDERS AS O
        WHERE O.CUSTOMER_ID = C.CUSTOMER_ID
    )AS TOTAL_QTY
FROM CUSTOMERS AS C
WHERE TOTAL_QTY>25;

/*Find all products that have never been ordered we need to display product_id and product name*/
--JOIN
SELECT
    P.PRODUCT_ID,
    P.PRODUCT_NAME
FROM PRODUCTS AS P
LEFT JOIN ORDERS AS O
ON O.PRODUCT_ID = P.PRODUCT_ID
WHERE O.PRODUCT_ID IS NULL;

--SUBQUERY
SELECT
    PRODUCT_ID,
    PRODUCT_NAME
FROM PRODUCTS
WHERE PRODUCT_ID NOT IN(SELECT DISTINCT PRODUCT_ID FROM ORDERS);

--CTE
WITH ORDERED_PRODUCT AS(
    SELECT DISTINCT PRODUCT_ID
    FROM ORDERS
)
SELECT
    PRODUCT_ID,
    PRODUCT_NAME
FROM PRODUCTS
WHERE PRODUCT_ID NOT IN(SELECT DISTINCT PRODUCT_ID FROM ORDERED_PRODUCT);

/*write a query in sql to get the detauls of the latest order of each customer.
Note that we need to display the customer_id,customer_name,product_name,latest_order*/
--JOIN
SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    P.PRODUCT_NAME,
    MAX(O.ORDER_DATE) AS LATEST_ORDER
FROM CUSTOMERS AS C
JOIN  ORDERS AS O
ON O.CUSTOMER_ID = C.CUSTOMER_ID
JOIN PRODUCTS AS P
ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY 1,2,3
ORDER BY C.CUSTOMER_ID;

--SELF JOIN
SELECT
    T1.CUSTOMER_ID,
    T3.CUSTOMER_NAME,
    T4.PRODUCT_NAME,
    T1.ORDER_DATE
FROM ORDERS AS T1
LEFT JOIN ORDERS AS T2
ON  
    T1.CUSTOMER_ID = T2.CUSTOMER_ID
    AND
    T1.ORDER_DATE < T2.ORDER_DATE
JOIN CUSTOMERS AS T3
ON T3.CUSTOMER_ID = T1.CUSTOMER_ID
JOIN PRODUCTS AS T4
ON T4.PRODUCT_ID = T1.PRODUCT_ID
WHERE T2.CUSTOMER_ID IS NULL
ORDER BY T1.CUSTOMER_ID ASC;
--CTE
WITH LATEST_ORDER AS(
    SELECT
        CUSTOMER_ID,
        PRODUCT_ID,
        MAX(ORDER_DATE) AS LATEST_ORDER_DATE
    FROM ORDERS
    GROUP BY 1,2
)
SELECT 
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    P.PRODUCT_NAME,
    LOD.LATEST_ORDER_DATE
FROM CUSTOMERS AS C
JOIN LATEST_ORDER AS LOD
ON C.CUSTOMER_ID = LOD.CUSTOMER_ID
JOIN PRODUCTS AS P
ON P.PRODUCT_ID = LOD.PRODUCT_ID
ORDER BY CUSTOMER_ID;

/*write a query to find the customer_id,customer_name,total_spending(qty*unit_price) of top 3 customerr*/
--JOIN And Subquery
SELECT 
    ranked.CUSTOMER_ID,
    ranked.CUSTOMER_NAME,
    ranked.TOTAL_SPENDING
FROM(
SELECT
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    SUM(O.QUANTITY * P.UNIT_PRICE) AS TOTAL_SPENDING,
    DENSE_RANK () OVER(ORDER BY SUM(O.QUANTITY * P.UNIT_PRICE) DESC) AS RANK
FROM ORDERS AS O
JOIN CUSTOMERS AS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN PRODUCTS AS P
ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY 1,2)ranked
WHERE ranked.RANK <4
ORDER BY ranked.TOTAL_SPENDING DESC;

--CTE
WITH TOTAL_SPENDING AS(
    SELECT
        O.CUSTOMER_ID,
        P.PRODUCT_ID,
        SUM(O.QUANTITY*P.UNIT_PRICE) AS TOTAL_SPENDING,
        DENSE_RANK() OVER(ORDER BY TOTAL_SPENDING DESC) AS RANK
    FROM PRODUCTS AS P
    JOIN ORDERS AS O
    ON O.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY 1,2
)
SELECT 
    TS.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    TS.TOTAL_SPENDING,
FROM TOTAL_SPENDING AS TS
JOIN CUSTOMERS AS C
ON C.CUSTOMER_ID = TS.CUSTOMER_ID
WHERE RANK <4
ORDER BY TS.TOTAL_SPENDING DESC;

/*use a recursive cte to generate number from 1 to 10*/

WITH R_CTE AS (
    SELECT 1 AS N
    UNION ALL
    SELECT N+1
    FROM R_CTE
    WHERE N<10
)
SELECT * FROM R_CTE;

/*use a recursive cte to generate Even number from 1 to 10*/

WITH R_CTE AS (
    SELECT 2 AS N
    UNION ALL
    SELECT N+2
    FROM R_CTE
    WHERE N<10
)
SELECT * FROM R_CTE;

-- CREATING A NEW TABLE
CREATE TABLE EMPLOYEE (
    employee_id INT,
    employee_name STRING,
    manager_id INT
);

INSERT INTO EMPLOYEE VALUES
(1, 'CEO', NULL),
(2, 'VP of Sales', 1),
(3, 'VP of Marketing', 1),
(4, 'Sales Manager 1', 2),
(5, 'Sales Manager 2', 2),
(6, 'Marketing Manager', 3),
(7, 'Sales Executive', 4),
(8, 'Marketing Executive', 6);

SELECT * FROM EMPLOYEE;

/*WRITE A QUERY TO PRINT THE HEIRARCHY FROM BOTTOM TO TOP OF THE GIVEN EMPLOYEEID = 8*/
WITH EMP_CTE AS(
    --BASE QUERY
    SELECT
        EMPLOYEE_ID,
        EMPLOYEE_NAME,
        MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEE_ID=8
    
    UNION ALL
    --RECURSIVE CONDITION
    SELECT
        E.EMPLOYEE_ID,
        E.EMPLOYEE_NAME,
        E.MANAGER_ID
    FROM EMPLOYEE AS E
    JOIN EMP_CTE AS EC
    ON E.EMPLOYEE_ID = EC.MANAGER_ID
)
SELECT * 
FROM EMP_CTE;
