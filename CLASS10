USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;
CREATE OR REPLACE  DATABASE CLASS_10;
CREATE OR REPLACE SCHEMA CLASS_10_SCHEMA;
USE DATABASE CLASS_10;
USE SCHEMA CLASS_10_SCHEMA;

CREATE OR REPLACE TABLE EMPLOYEE(
    ID INT,
    NAME VARCHAR(50),
    DEPARTMENT VARCHAR(50),
    AGE NUMBER,
    SALARY NUMBER
);

INSERT INTO EMPLOYEE (ID,NAME,DEPARTMENT,AGE,SALARY) VALUES
(1,'Jhon Deo','HR',30,50000.00),
(2,'Jane Smith', 'IT',25,70000.00),
(3,'Michael grown','Finance',40,85000.00),
(4,'Emily Davis', 'IT', 35, 75000.00),
(5,'Chris Johnson','HR',28,55000.00),
(6,'Anna Wilson', 'Finance',50, 90000.00),
(7,'David Lee','IT', 45, 80000.00),
(8,'Sophia King','HR',26, 53000.00),
(9,'James White', 'Finance' ,38,88000.00),
(10,'OLivia Green','IT', 32,72000.00);

SELECT * FROM EMPLOYEE;
--GIVE ME A SQL QUERY TO RETRIVE THE 2ND HIGHEST SALARY IN EACH DEPARTMENT

SELECT NAME,DEPARTMENT,SALARY FROM (
SELECT
    NAME,
    DEPARTMENT,
    SALARY, 
    DENSE_RANK() OVER( PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS SALARY_MEASURE
FROM EMPLOYEE) AS WINDOW_RANKING
WHERE SALARY_MEASURE = 2
ORDER BY SALARY DESC;

--LEAD(),LAG(),FIRST_VALUE(),LAST_VALUE(),NTH_VALUE()

--LEAD() - MEANS AANGE WALA
/*
    WE WANT TO WRITE A SQL QUERY WHICH RETURN US THE COMPARION BETWEEN THE CURRENT EMPLOYEE SALRY TO NEXT EMPLOYEE SALRY. ALSO WE NEED TO SEE THE CURRENT EMPLOYEE SALARY AND NEXT EMPLOYEE SALARY BESIDE EACH OTHER IN DIFFERENT COLUMN
*/
SELECT
    ID,
    NAME,
    SALARY,
    LEAD(SALARY,1) OVER(ORDER BY SALARY DESC) AS NEXT_EMP_SALARY
FROM EMPLOYEE;

/*
    WE WANT TO WRITE A SQL QUERY WHICH RETURN US THE COMPARION BETWEEN THE CURRENT EMPLOYEE SALRY TO NEXT EMPLOYEE SALRY IN EACH DEPARTMENT. ALSO WE NEED TO SEE THE CURRENT EMPLOYEE SALARY AND NEXT EMPLOYEE SALARY BESIDE EACH OTHER IN DIFFERENT COLUMN
*/
SELECT * FROM (
SELECT
    ID,
    DEPARTMENT,
    SALARY,
    LEAD(SALARY,1) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS NEXT_EMP_SALARY
FROM EMPLOYEE) AS LEAD_RANK
WHERE NEXT_EMP_SALARY IS NULL;

--LAG
SELECT * FROM (
SELECT
    ID,
    DEPARTMENT,
    SALARY,
    LAG(SALARY,1) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS PREV_EMP_SALARY
FROM EMPLOYEE) AS LAG_RANK
WHERE PREV_EMP_SALARY IS NULL;

--LEAD/LAG
SELECT * FROM (
SELECT
    ID,
    DEPARTMENT,
    SALARY,
    LEAD(SALARY,1) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS NEXT_EMP_SALARY,
    LAG(SALARY,1) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS PREV_EMP_SALARY
FROM EMPLOYEE) AS LAG_LAG
WHERE NEXT_EMP_SALARY IS NOT NULL
    AND
    PREV_EMP_SALARY IS NOT NULL;

--FIRST VALUE
/*
    IN EACH OF DEPARTMENT WE HAVE TO SHOW THE LOWEST SALARY
*/

SELECT
    ID,
    NAME,
    DEPARTMENT,
    SALARY,
    FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS LOWEST_SALARY,
    SALARY - FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS DIFF
FROM EMPLOYEE
ORDER BY DEPARTMENT;

--LAST VALUE
SELECT
    ID,
    NAME,
    DEPARTMENT,
    SALARY,
    LAST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS HIGHEST_SALARY
    -- SALARY - FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS DIFF
FROM EMPLOYEE
ORDER BY DEPARTMENT;

--MPRECEADING N FOLLOWING
SELECT
    ID,
    NAME,
    DEPARTMENT,
    SALARY,
    LAST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) AS LOWEST_SALARY
FROM EMPLOYEE
ORDER BY DEPARTMENT DESC, SALARY ASC;

--NTH 

SELECT
    ID,
    NAME,
    DEPARTMENT,
    SALARY,
    NTH_VALUE(SALARY,2) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC ROWS BETWEEN 2PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_SALARY
FROM EMPLOYEE
ORDER BY DEPARTMENT DESC, SALARY DESC;

